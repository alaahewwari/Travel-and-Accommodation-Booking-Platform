// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TABP.Persistence;

#nullable disable

namespace TABP.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250709154005_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmenityRoomClass", b =>
                {
                    b.Property<int>("AmenitiesId")
                        .HasColumnType("int");

                    b.Property<long>("RoomClassesId")
                        .HasColumnType("bigint");

                    b.HasKey("AmenitiesId", "RoomClassesId");

                    b.HasIndex("RoomClassesId");

                    b.ToTable("RoomClassAmenities", (string)null);
                });

            modelBuilder.Entity("TABP.Domain.Entites.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Amenities", (string)null);
                });

            modelBuilder.Entity("TABP.Domain.Entites.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostOffice")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Country1",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "City1",
                            PostOffice = "PO1",
                            UpdatedAt = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Country = "Country2",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "City2",
                            PostOffice = "PO2",
                            UpdatedAt = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Country = "Country3",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "City3",
                            PostOffice = "PO3",
                            UpdatedAt = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Country = "Country4",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "City4",
                            PostOffice = "PO4",
                            UpdatedAt = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Country = "Country5",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "City5",
                            PostOffice = "PO5",
                            UpdatedAt = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entites.CityImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId1")
                        .HasColumnType("int");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CityId1");

                    b.ToTable("CityImages");
                });

            modelBuilder.Entity("TABP.Domain.Entites.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discounts", (string)null);
                });

            modelBuilder.Entity("TABP.Domain.Entites.Hotel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BriefDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("LocationLatitude")
                        .HasColumnType("float");

                    b.Property<double>("LocationLongitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerId1")
                        .HasColumnType("bigint");

                    b.Property<byte>("StarRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CityId1");

                    b.HasIndex("OwnerId");

                    b.HasIndex("OwnerId1");

                    b.ToTable("Hotels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Address 1",
                            BriefDescription = "Brief Desc",
                            CityId = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Full Desc",
                            IsDeleted = false,
                            LocationLatitude = 48.850000000000001,
                            LocationLongitude = 2.3500000000000001,
                            Name = "Hotel1",
                            OwnerId = 1L,
                            StarRating = (byte)4
                        },
                        new
                        {
                            Id = 2L,
                            Address = "Address 2",
                            BriefDescription = "Brief Desc",
                            CityId = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Full Desc",
                            IsDeleted = false,
                            LocationLatitude = 48.859999999999999,
                            LocationLongitude = 2.3599999999999999,
                            Name = "Hotel2",
                            OwnerId = 2L,
                            StarRating = (byte)3
                        },
                        new
                        {
                            Id = 3L,
                            Address = "Address 3",
                            BriefDescription = "Brief Desc",
                            CityId = 3,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Full Desc",
                            IsDeleted = false,
                            LocationLatitude = 48.869999999999997,
                            LocationLongitude = 2.3700000000000001,
                            Name = "Hotel3",
                            OwnerId = 3L,
                            StarRating = (byte)5
                        },
                        new
                        {
                            Id = 4L,
                            Address = "Address 4",
                            BriefDescription = "Brief Desc",
                            CityId = 4,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Full Desc",
                            IsDeleted = false,
                            LocationLatitude = 48.880000000000003,
                            LocationLongitude = 2.3799999999999999,
                            Name = "Hotel4",
                            OwnerId = 4L,
                            StarRating = (byte)4
                        },
                        new
                        {
                            Id = 5L,
                            Address = "Address 5",
                            BriefDescription = "Brief Desc",
                            CityId = 5,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Full Desc",
                            IsDeleted = false,
                            LocationLatitude = 48.890000000000001,
                            LocationLongitude = 2.3900000000000001,
                            Name = "Hotel5",
                            OwnerId = 5L,
                            StarRating = (byte)3
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entites.HotelImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HotelId1")
                        .HasColumnType("bigint");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("HotelId1");

                    b.ToTable("HotelImages");
                });

            modelBuilder.Entity("TABP.Domain.Entites.Owner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Owners", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Owner1",
                            IsDeleted = false,
                            LastName = "OwnerLast1",
                            PhoneNumber = "0123456780"
                        },
                        new
                        {
                            Id = 2L,
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Owner2",
                            IsDeleted = false,
                            LastName = "OwnerLast2",
                            PhoneNumber = "0123456781"
                        },
                        new
                        {
                            Id = 3L,
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Owner3",
                            IsDeleted = false,
                            LastName = "OwnerLast3",
                            PhoneNumber = "0123456782"
                        },
                        new
                        {
                            Id = 4L,
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Owner4",
                            IsDeleted = false,
                            LastName = "OwnerLast4",
                            PhoneNumber = "0123456783"
                        },
                        new
                        {
                            Id = 5L,
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Owner5",
                            IsDeleted = false,
                            LastName = "OwnerLast5",
                            PhoneNumber = "0123456784"
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entites.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HotelId1")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("HotelId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Comment = "Great",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1L,
                            Rating = 5,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Comment = "Good",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2L,
                            Rating = 4,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Comment = "Okay",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 3L,
                            Rating = 3,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Comment = "Bad",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 4L,
                            Rating = 2,
                            UserId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Comment = "Terrible",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 5L,
                            Rating = 1,
                            UserId = 5L
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entites.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 3,
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 4,
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 5,
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entites.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("RoomClassId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomClassId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomClassId");

                    b.HasIndex("RoomClassId1");

                    b.ToTable("Rooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Number = "Room1",
                            RoomClassId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Number = "Room2",
                            RoomClassId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Number = "Room3",
                            RoomClassId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Number = "Room4",
                            RoomClassId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Number = "Room5",
                            RoomClassId = 5L
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entites.RoomClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AdultsCapacity")
                        .HasColumnType("int");

                    b.Property<string>("BriefDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChildrenCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountId1")
                        .HasColumnType("int");

                    b.Property<long>("HotelId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("DiscountId1");

                    b.HasIndex("HotelId");

                    b.ToTable("RoomClasses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdultsCapacity = 2,
                            BriefDescription = "Brief Room",
                            ChildrenCapacity = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Full Room Desc",
                            HotelId = 1L,
                            IsDeleted = false,
                            PricePerNight = 100m,
                            Type = (byte)0
                        },
                        new
                        {
                            Id = 2L,
                            AdultsCapacity = 2,
                            BriefDescription = "Brief Room",
                            ChildrenCapacity = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Full Room Desc",
                            HotelId = 2L,
                            IsDeleted = false,
                            PricePerNight = 150m,
                            Type = (byte)0
                        },
                        new
                        {
                            Id = 3L,
                            AdultsCapacity = 2,
                            BriefDescription = "Brief Room",
                            ChildrenCapacity = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Full Room Desc",
                            HotelId = 3L,
                            IsDeleted = false,
                            PricePerNight = 200m,
                            Type = (byte)0
                        },
                        new
                        {
                            Id = 4L,
                            AdultsCapacity = 2,
                            BriefDescription = "Brief Room",
                            ChildrenCapacity = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Full Room Desc",
                            HotelId = 4L,
                            IsDeleted = false,
                            PricePerNight = 250m,
                            Type = (byte)0
                        },
                        new
                        {
                            Id = 5L,
                            AdultsCapacity = 2,
                            BriefDescription = "Brief Room",
                            ChildrenCapacity = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Full Room Desc",
                            HotelId = 5L,
                            IsDeleted = false,
                            PricePerNight = 300m,
                            Type = (byte)0
                        });
                });

            modelBuilder.Entity("TABP.Domain.Entites.RoomImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<long>("RoomClassId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoomClassId");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("TABP.Domain.Entites.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            FirstName = "User1",
                            IsDeleted = false,
                            LastName = "Surname1",
                            PasswordHash = "hashed_pwd",
                            RoleId = 1,
                            Salt = "salt",
                            Username = "user1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            FirstName = "User2",
                            IsDeleted = false,
                            LastName = "Surname2",
                            PasswordHash = "hashed_pwd",
                            RoleId = 2,
                            Salt = "salt",
                            Username = "user2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@example.com",
                            FirstName = "User3",
                            IsDeleted = false,
                            LastName = "Surname3",
                            PasswordHash = "hashed_pwd",
                            RoleId = 3,
                            Salt = "salt",
                            Username = "user3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@example.com",
                            FirstName = "User4",
                            IsDeleted = false,
                            LastName = "Surname4",
                            PasswordHash = "hashed_pwd",
                            RoleId = 4,
                            Salt = "salt",
                            Username = "user4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@example.com",
                            FirstName = "User5",
                            IsDeleted = false,
                            LastName = "Surname5",
                            PasswordHash = "hashed_pwd",
                            RoleId = 5,
                            Salt = "salt",
                            Username = "user5"
                        });
                });

            modelBuilder.Entity("AmenityRoomClass", b =>
                {
                    b.HasOne("TABP.Domain.Entites.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TABP.Domain.Entites.RoomClass", null)
                        .WithMany()
                        .HasForeignKey("RoomClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TABP.Domain.Entites.Amenity", b =>
                {
                    b.HasOne("TABP.Domain.Entites.Hotel", null)
                        .WithMany("Amenities")
                        .HasForeignKey("HotelId");
                });

            modelBuilder.Entity("TABP.Domain.Entites.CityImage", b =>
                {
                    b.HasOne("TABP.Domain.Entites.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TABP.Domain.Entites.City", null)
                        .WithMany("CityImages")
                        .HasForeignKey("CityId1");

                    b.Navigation("City");
                });

            modelBuilder.Entity("TABP.Domain.Entites.Hotel", b =>
                {
                    b.HasOne("TABP.Domain.Entites.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TABP.Domain.Entites.City", null)
                        .WithMany("Hotels")
                        .HasForeignKey("CityId1");

                    b.HasOne("TABP.Domain.Entites.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TABP.Domain.Entites.Owner", null)
                        .WithMany("Hotels")
                        .HasForeignKey("OwnerId1");

                    b.Navigation("City");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TABP.Domain.Entites.HotelImage", b =>
                {
                    b.HasOne("TABP.Domain.Entites.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TABP.Domain.Entites.Hotel", null)
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelId1");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TABP.Domain.Entites.Review", b =>
                {
                    b.HasOne("TABP.Domain.Entites.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TABP.Domain.Entites.Hotel", null)
                        .WithMany("Reviews")
                        .HasForeignKey("HotelId1");

                    b.HasOne("TABP.Domain.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TABP.Domain.Entites.User", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserId1");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TABP.Domain.Entites.Room", b =>
                {
                    b.HasOne("TABP.Domain.Entites.RoomClass", "RoomClass")
                        .WithMany()
                        .HasForeignKey("RoomClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TABP.Domain.Entites.RoomClass", null)
                        .WithMany("Rooms")
                        .HasForeignKey("RoomClassId1");

                    b.Navigation("RoomClass");
                });

            modelBuilder.Entity("TABP.Domain.Entites.RoomClass", b =>
                {
                    b.HasOne("TABP.Domain.Entites.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TABP.Domain.Entites.Discount", null)
                        .WithMany("RoomClasses")
                        .HasForeignKey("DiscountId1");

                    b.HasOne("TABP.Domain.Entites.Hotel", "Hotel")
                        .WithMany("RoomClasses")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TABP.Domain.Entites.RoomImage", b =>
                {
                    b.HasOne("TABP.Domain.Entites.RoomClass", "RoomClass")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomClass");
                });

            modelBuilder.Entity("TABP.Domain.Entites.User", b =>
                {
                    b.HasOne("TABP.Domain.Entites.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TABP.Domain.Entites.City", b =>
                {
                    b.Navigation("CityImages");

                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("TABP.Domain.Entites.Discount", b =>
                {
                    b.Navigation("RoomClasses");
                });

            modelBuilder.Entity("TABP.Domain.Entites.Hotel", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("HotelImages");

                    b.Navigation("Reviews");

                    b.Navigation("RoomClasses");
                });

            modelBuilder.Entity("TABP.Domain.Entites.Owner", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("TABP.Domain.Entites.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TABP.Domain.Entites.RoomClass", b =>
                {
                    b.Navigation("RoomImages");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("TABP.Domain.Entites.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
